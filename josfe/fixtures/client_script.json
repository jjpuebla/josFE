[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2025-07-18 11:15:53.541188",
  "module": "ClienteSetup",
  "name": "JOS_Tax_Id_Validador",
  "script": "/**\r\n * Customer Form - Ecuador Tax ID Validator (custom_jos_tax_id_validador)\r\n * -----------------------------------------------------------------------\r\n * Purpose:\r\n * This script validates Ecuadorian identification numbers in the custom field\r\n * `custom_jos_tax_id_validador`, and updates the core `tax_id` and `customer_type`\r\n * fields accordingly. It supports:\r\n * \r\n * - Cedula (10 digits)\r\n * - RUC P√∫blico (13 digits, ends in 0001, 3rd digit = 6)\r\n * - RUC Privado (13 digits, ends in 001, 3rd digit = 9)\r\n * - Passport (Prefixed with \"P-\")\r\n * - Consumidor Final (value 9999999999999)\r\n * \r\n * Additional Feature:\r\n * - Changes the input background color based on validation result:\r\n *   - ‚úÖ Green = Valid ID\r\n *   - ‚ö†Ô∏è Yellow = Consumidor Final\r\n *   - üîµ Blue = Passport\r\n *   - ‚ùå Red = Invalid\r\n *   - üî≤ Blank = Reset\r\n */\r\n\r\nfrappe.ui.form.on('Customer', {\r\n    custom_jos_tax_id_validador: function(frm) {\r\n        const raw_input = (frm.doc.custom_jos_tax_id_validador || '').trim().toUpperCase();\r\n\r\n        // Utility: apply background color to input field for visual feedback\r\n        function setFieldColor(color) {\r\n            const inputField = $(`[data-fieldname=\"custom_jos_tax_id_validador\"] input`);\r\n            if (inputField.length) {\r\n                inputField.css(\"background-color\", color);\r\n            }\r\n        }\r\n\r\n        // If the field is empty, reset related values and background\r\n        if (!raw_input) {\r\n            setFieldColor('');\r\n            frm.set_value('tax_id', '');\r\n            frm.set_value('customer_type', '');\r\n            return;\r\n        }\r\n\r\n        // Check if it's a passport (starts with \"P-\")\r\n        const is_passport = raw_input.startsWith(\"P-\");\r\n        const id = is_passport ? raw_input.slice(2) : raw_input;\r\n\r\n        // --- MAIN VALIDATION LOGIC ---\r\n\r\n        if (is_passport) {\r\n            // Passport: Strip \"P-\", set as individual\r\n            frm.set_value('tax_id', id);\r\n            frm.set_value('customer_type', 'Individual');\r\n            setFieldColor('#e2f0fb'); // light blue\r\n        } else if (id === \"9999999999999\") {\r\n            // Special case: Consumidor Final\r\n            frm.set_value('tax_id', id);\r\n            frm.set_value('customer_type', 'Individual');\r\n            setFieldColor('#fff3cd'); // yellowish\r\n        } else if (validateEcuadorID(id)) {\r\n            // Valid Cedula or RUC\r\n            frm.set_value('tax_id', id);\r\n            frm.set_value('customer_type', getCustomerType(id));\r\n            setFieldColor('#d4edda'); // green\r\n        } else {\r\n            // Invalid ID\r\n            setFieldColor('#f8d7da'); // red\r\n        }\r\n\r\n        // -------------------------------\r\n        // üß© HELPER FUNCTIONS\r\n        // -------------------------------\r\n\r\n        function validateEcuadorID(id) {\r\n            if (!/^\\d{10}(\\d{3})?$/.test(id)) return false;\r\n\r\n            const province = parseInt(id.slice(0, 2));\r\n            if (province < 1 || province > 24) return false;\r\n\r\n            const third_digit = parseInt(id[2]);\r\n            if (third_digit < 6) return validateCedula(id.slice(0, 10));\r\n            if (third_digit === 6) return validatePublicRUC(id);\r\n            if (third_digit === 9) return validatePrivateRUC(id);\r\n\r\n            return false;\r\n        }\r\n\r\n        function getCustomerType(id) {\r\n            const third_digit = parseInt(id[2]);\r\n            if (isNaN(third_digit)) return '';\r\n            return third_digit < 6 ? 'Individual' : 'Company';\r\n        }\r\n\r\n        function validateCedula(cedula) {\r\n            const digits = cedula.split('').map(Number);\r\n            const check_digit = digits.pop();\r\n            let total = 0;\r\n\r\n            for (let i = 0; i < digits.length; i++) {\r\n                let val = digits[i];\r\n                if (i % 2 === 0) {\r\n                    val *= 2;\r\n                    if (val > 9) val -= 9;\r\n                }\r\n                total += val;\r\n            }\r\n\r\n            const computed = (10 - (total % 10)) % 10;\r\n            return check_digit === computed;\r\n        }\r\n\r\n        function validatePublicRUC(ruc) {\r\n            if (ruc.length !== 13 || !ruc.endsWith(\"0001\")) return false;\r\n            const coeffs = [3, 2, 7, 6, 5, 4, 3, 2];\r\n            const digits = ruc.split('').map(Number);\r\n            const total = coeffs.reduce((sum, c, i) => sum + digits[i] * c, 0);\r\n            const check = 11 - (total % 11);\r\n            return digits[8] === (check === 11 ? 0 : check);\r\n        }\r\n\r\n        function validatePrivateRUC(ruc) {\r\n            if (ruc.length !== 13 || !ruc.endsWith(\"001\")) return false;\r\n            const coeffs = [4, 3, 2, 7, 6, 5, 4, 3, 2];\r\n            const digits = ruc.split('').map(Number);\r\n            const total = coeffs.reduce((sum, c, i) => sum + digits[i] * c, 0);\r\n            const check = 11 - (total % 11);\r\n            return digits[9] === (check === 11 ? 0 : check);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2025-07-18 11:25:51.257326",
  "module": "ClienteSetup",
  "name": "Address-City-Sync",
  "script": "/**\r\n * Customer Form - Address Sync from Custom Fields\r\n * -----------------------------------------------\r\n * Purpose:\r\n * This script automates the synchronization of address data stored in custom fields \r\n * (`custom_jos_city2`, `custom_jos_direccion`, `custom_jos_country`) in the Customer Doctype.\r\n * \r\n * Logic:\r\n * - On save (`after_save`), if city, address, and country are present, the script checks for \r\n *   an existing linked Address record.\r\n *   - If one exists, it updates its `city`, `address_line1`, and `country`.\r\n *   - If none exists, it creates a new Address and links it to the Customer.\r\n * \r\n * Additional:\r\n * - On load (`onload`), hides:\r\n *   - Custom address input fields from the form UI\r\n *   - Primary Address and Contact sections (especially in Quick Entry)\r\n */\r\n\r\nfrappe.ui.form.on('Customer', {\r\n\r\n    after_save: function(frm) {\r\n        // Retrieve values from custom fields\r\n        const city = frm.doc.custom_jos_city2;\r\n        const direccion = frm.doc.custom_jos_direccion;\r\n        const country = frm.doc.custom_jos_country;\r\n\r\n        // Ensure all required fields are filled before proceeding\r\n        if (!(city && direccion && country)) {\r\n            frappe.msgprint(\"Faltan campos: City2, Direcci√≥n o Pa√≠s.\");\r\n            return;\r\n        }\r\n\r\n        // Step 1: Check if the Customer has any linked Address using Dynamic Link\r\n        frappe.call({\r\n            method: \"frappe.client.get_list\",\r\n            args: {\r\n                doctype: \"Address\",\r\n                filters: {\r\n                    links: {\r\n                        link_doctype: \"Customer\",\r\n                        link_name: frm.doc.name\r\n                    }\r\n                },\r\n                fields: [\"name\"],\r\n                limit_page_length: 1\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.length > 0) {\r\n                    // If an Address exists, update its fields\r\n                    let address_name = r.message[0].name;\r\n                    frappe.call({\r\n                        method: \"frappe.client.set_value\",\r\n                        args: {\r\n                            doctype: \"Address\",\r\n                            name: address_name,\r\n                            fieldname: {\r\n                                city: city,\r\n                                address_line1: direccion,\r\n                                country: country\r\n                            }\r\n                        },\r\n                        callback: function() {\r\n                            frappe.msgprint(\"Direcci√≥n existente actualizada.\");\r\n                            frm.reload_doc();\r\n                        },\r\n                        error: function(err) {\r\n                            frappe.msgprint(\"‚ùå Error al actualizar la direcci√≥n: \" + err.message);\r\n                            console.error(\"Update Address Error\", err);\r\n                        }\r\n                    });\r\n\r\n                } else {\r\n                    // If no Address exists, create a new Address linked to this Customer\r\n                    const fallback_title = frm.doc.customer_name || `Auto-${frappe.datetime.now_datetime()}`;\r\n                    frappe.call({\r\n                        method: \"frappe.client.insert\",\r\n                        args: {\r\n                            doc: {\r\n                                doctype: \"Address\",\r\n                                address_title: fallback_title,\r\n                                address_type: \"Billing\",\r\n                                city: city,\r\n                                address_line1: direccion,\r\n                                country: country,\r\n                                links: [\r\n                                    {\r\n                                        link_doctype: \"Customer\",\r\n                                        link_name: frm.doc.name\r\n                                    }\r\n                                ]\r\n                            }\r\n                        },\r\n                        callback: function(res) {\r\n                            if (res.message && res.message.name) {\r\n                                frappe.msgprint(\"Nueva direcci√≥n creada: \" + res.message.name);\r\n                                frm.reload_doc();\r\n                            }\r\n                        },\r\n                        error: function(err) {\r\n                            frappe.msgprint(\"‚ùå Error al crear la direcci√≥n: \" + err.message);\r\n                            console.error(\"Insert Address Error\", err);\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            error: function(err) {\r\n                frappe.msgprint(\"‚ùå Error al buscar direcciones: \" + err.message);\r\n                console.error(\"Address Lookup Error\", err);\r\n            }\r\n        });\r\n    },\r\n\r\n    onload: function(frm) {\r\n        // üü¶ Quick Entry UI Cleanup: Hide address and contact layout sections\r\n        if (frm.is_new() && frm.meta.quick_entry) {\r\n            setTimeout(() => {\r\n                $(\".address-and-contact\").hide();\r\n            }, 300);\r\n        }\r\n\r\n        // üü® Hide custom input fields from full form\r\n        frm.set_df_property(\"custom_jos_city2\", \"hidden\", 1);\r\n        frm.set_df_property(\"custom_jos_direccion\", \"hidden\", 1);\r\n        frm.set_df_property(\"custom_jos_country\", \"hidden\", 1);\r\n\r\n        // üü• Hide Address/Contact layout sections from full form (UI-only)\r\n        setTimeout(() => {\r\n            $('div.section-head:contains(\"Primary Contact Details\")').closest('.section').hide();\r\n            $('div.section-head:contains(\"Primary Address Details\")').closest('.section').hide();\r\n        }, 300);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2025-07-18 11:28:09.426602",
  "module": "ClienteSetup",
  "name": "Customer - Sync Nombre Cliente",
  "script": "/**\r\n * Customer Form - Sync Custom Name Field with Core Name Field\r\n * ------------------------------------------------------------\r\n * Purpose:\r\n * This script keeps the standard `customer_name` field synchronized with a custom\r\n * input field named `custom_jos_nombre_cliente`.\r\n * \r\n * Behavior:\r\n * - When the user updates the custom field (`custom_jos_nombre_cliente`), its value\r\n *   is copied to the core ERPNext field `customer_name`.\r\n * - Optionally, when the form loads and the custom field is empty but `customer_name`\r\n *   has a value, the script copies it into the custom field ‚Äî this helps during edits.\r\n * \r\n * Notes:\r\n * - The sync is one-directional during editing, but bidirectional at load time.\r\n * - This script should only be used if `customer_name` is editable in the form.\r\n */\r\n\r\nfrappe.ui.form.on('Customer', {\r\n    // üîÑ When user edits the custom name field, update the standard name\r\n    custom_jos_nombre_cliente: function(frm) {\r\n        if (frm.doc.custom_jos_nombre_cliente) {\r\n            frm.set_value('customer_name', frm.doc.custom_jos_nombre_cliente);\r\n        }\r\n    },\r\n\r\n    // üß† On form load, optionally initialize the custom field with customer_name if missing\r\n    onload: function(frm) {\r\n        if (!frm.doc.custom_jos_nombre_cliente && frm.doc.customer_name) {\r\n            frm.set_value('custom_jos_nombre_cliente', frm.doc.customer_name);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Company",
  "enabled": 1,
  "modified": "2025-07-18 22:38:27.379797",
  "module": "My_Data",
  "name": "Jos_Populate_Naming_Series",
  "script": "let cached_series = [];\r\n\r\nfrappe.ui.form.on('Company', {\r\n  onload: function(frm) {\r\n    // Load naming series once and store them\r\n    frappe.call({\r\n      method: \"josfe.api.naming_series.get_naming_series_options_for\",\r\n      args: { doctype: \"Sales Invoice\" },\r\n      callback: function(res) {\r\n        if (res.message) {\r\n          cached_series = res.message.map(r => r.name);\r\n          const options_str = cached_series.join('\\n');\r\n\r\n          // Set options in meta\r\n          let df = frappe.meta.get_docfield(\"Jos_Establecimientos\", \"jos_naming_series\", frm.doc.name);\r\n          if (df) {\r\n            df.options = options_str;\r\n          }\r\n\r\n          // Refresh the grid after options are set\r\n          if (frm.fields_dict.custom_jos_tabla_estab) {\r\n            frm.fields_dict.custom_jos_tabla_estab.grid.refresh();\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\nfrappe.ui.form.on('Jos_Establecimientos', {\r\n  jos_warehouse: function(frm, cdt, cdn) {\r\n    apply_cached_series(frm, cdt, cdn);\r\n  },\r\n  jos_naming_series: function(frm, cdt, cdn) {\r\n    if (!locals[cdt][cdn].jos_naming_series) {\r\n      apply_cached_series(frm, cdt, cdn);\r\n    }\r\n  }\r\n});\r\n\r\nfunction apply_cached_series(frm, cdt, cdn) {\r\n  if (cached_series.length === 0) return;\r\n\r\n  let df = frappe.meta.get_docfield(\"Jos_Establecimientos\", \"jos_naming_series\", frm.doc.name);\r\n  if (df) {\r\n    df.options = cached_series.join('\\n');\r\n    frm.fields_dict.custom_jos_tabla_estab.grid.refresh();\r\n  }\r\n}\r\nfrappe.ui.form.on('Jos_Establecimientos', {\r\n  jos_warehouse: function(frm, cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n\r\n    // 1. Set naming series\r\n    apply_cached_series(frm, cdt, cdn);\r\n\r\n    // 2. Fetch warehouse address\r\n    if (row.jos_warehouse) {\r\n      frappe.call({\r\n        method: \"josfe.api.naming_series.get_address_for_warehouse\",\r\n        args: {\r\n          warehouse: row.jos_warehouse\r\n        },\r\n        callback: function(res) {\r\n          if (res.message) {\r\n            frappe.model.set_value(cdt, cdn, \"custom_jos_address\", res.message);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2025-07-18 11:13:40.427362",
  "module": "ClienteSetup",
  "name": "Jos_Address-City-Sync-from_ecua_cities",
  "script": "/**\r\n * Address - Sync and UI Customization Script\r\n * -------------------------------------------\r\n * Purpose:\r\n * This script is executed on the Address Doctype form.\r\n * It performs two main functions:\r\n * \r\n * 1. Automatically copies the value from the custom field `custom_jos_ecua_cities`\r\n *    to the standard ERPNext `city` field. This ensures that custom input is\r\n *    synced with the system field used in reports, filters, etc.\r\n * \r\n * 2. Hides the `city` field in the form to prevent user confusion or double input.\r\n *    This is done at the UI level using `frm.set_df_property` so it does not affect the\r\n *    underlying metadata or database schema (unlike Property Setter).\r\n */\r\n\r\nfrappe.ui.form.on('Address', {\r\n    onload: function(frm) {\r\n        // If the standard city field is empty but the custom field has a value,\r\n        // auto-fill it. This happens when loading a new or unsaved form.\r\n        if (!frm.doc.city && frm.doc.custom_jos_ecua_cities) {\r\n            frm.set_value('city', frm.doc.custom_jos_ecua_cities);\r\n        }\r\n\r\n        // Hide the standard city field in the UI.\r\n        // This avoids user confusion between native and custom fields.\r\n        // It does NOT create a permanent Property Setter ‚Äî only affects UI.\r\n        frm.set_df_property(\"city\", \"hidden\", 1);\r\n    },\r\n\r\n    validate: function(frm) {\r\n        // Ensure the sync between custom and native field is enforced on save.\r\n        // Even if the user never touched the field manually, the value is copied over.\r\n        if (frm.doc.custom_jos_ecua_cities && frm.doc.city !== frm.doc.custom_jos_ecua_cities) {\r\n            frm.set_value('city', frm.doc.custom_jos_ecua_cities);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 }
]