[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2025-07-14 01:59:41.284531",
  "module": null,
  "name": "JOS_Tax_Id_Validador",
  "script": "frappe.ui.form.on('Customer', {\r\n    // Run when field value changes\r\n    custom_jos_tax_id_validador: function(frm) {\r\n        const raw_input = (frm.doc.custom_jos_tax_id_validador || '').trim().toUpperCase();\r\n\r\n        // Utility: apply color to input in both Quick Entry & full form\r\n        function setFieldColor(color) {\r\n            const inputField = $(`[data-fieldname=\"custom_jos_tax_id_validador\"] input`);\r\n            if (inputField.length) {\r\n                inputField.css(\"background-color\", color);\r\n            }\r\n        }\r\n\r\n        // Reset background and exit if empty\r\n        if (!raw_input) {\r\n            setFieldColor('');\r\n            frm.set_value('tax_id', '');\r\n            frm.set_value('customer_type', '');\r\n            return;\r\n        }\r\n\r\n        const is_passport = raw_input.startsWith(\"P-\");\r\n        const id = is_passport ? raw_input.slice(2) : raw_input;\r\n\r\n        // Final logic: validate and act\r\n        if (is_passport) {\r\n            frm.set_value('tax_id', id);\r\n            frm.set_value('customer_type', 'Individual');\r\n            setFieldColor('#e2f0fb'); // blue\r\n        } else if (id === \"9999999999999\") {\r\n            frm.set_value('tax_id', id);\r\n            frm.set_value('customer_type', 'Individual');\r\n            setFieldColor('#fff3cd'); // yellowish (optional)\r\n        } else if (validateEcuadorID(id)) {\r\n            frm.set_value('tax_id', id);\r\n            frm.set_value('customer_type', getCustomerType(id));\r\n            setFieldColor('#d4edda'); // green\r\n        } else {\r\n            setFieldColor('#f8d7da'); // red\r\n        }\r\n\r\n        // --- Helpers ---\r\n\r\n        function validateEcuadorID(id) {\r\n            if (!/^\\d{10}(\\d{3})?$/.test(id)) return false;\r\n\r\n            const province = parseInt(id.slice(0, 2));\r\n            if (province < 1 || province > 24) return false;\r\n\r\n            const third_digit = parseInt(id[2]);\r\n            if (third_digit < 6) return validateCedula(id.slice(0, 10));\r\n            if (third_digit === 6) return validatePublicRUC(id);\r\n            if (third_digit === 9) return validatePrivateRUC(id);\r\n\r\n            return false;\r\n        }\r\n\r\n        function getCustomerType(id) {\r\n            const third_digit = parseInt(id[2]);\r\n            if (isNaN(third_digit)) return '';\r\n            return third_digit < 6 ? 'Individual' : 'Company';\r\n        }\r\n\r\n        function validateCedula(cedula) {\r\n            const digits = cedula.split('').map(Number);\r\n            const check_digit = digits.pop();\r\n            let total = 0;\r\n            for (let i = 0; i < digits.length; i++) {\r\n                let val = digits[i];\r\n                if (i % 2 === 0) {\r\n                    val *= 2;\r\n                    if (val > 9) val -= 9;\r\n                }\r\n                total += val;\r\n            }\r\n            const computed = (10 - (total % 10)) % 10;\r\n            return check_digit === computed;\r\n        }\r\n\r\n        function validatePublicRUC(ruc) {\r\n            if (ruc.length !== 13 || !ruc.endsWith(\"0001\")) return false;\r\n            const coeffs = [3, 2, 7, 6, 5, 4, 3, 2];\r\n            const digits = ruc.split('').map(Number);\r\n            const total = coeffs.reduce((sum, c, i) => sum + digits[i] * c, 0);\r\n            const check = 11 - (total % 11);\r\n            return digits[8] === (check === 11 ? 0 : check);\r\n        }\r\n\r\n        function validatePrivateRUC(ruc) {\r\n            if (ruc.length !== 13 || !ruc.endsWith(\"001\")) return false;\r\n            const coeffs = [4, 3, 2, 7, 6, 5, 4, 3, 2];\r\n            const digits = ruc.split('').map(Number);\r\n            const total = coeffs.reduce((sum, c, i) => sum + digits[i] * c, 0);\r\n            const check = 11 - (total % 11);\r\n            return digits[9] === (check === 11 ? 0 : check);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2025-07-15 19:14:06.507894",
  "module": null,
  "name": "Address-City-Sync",
  "script": "frappe.ui.form.on('Customer', {\r\n    after_save: function(frm) {\r\n        // Ensure values are provided\r\n        const city = frm.doc.custom_jos_city2;\r\n        const direccion = frm.doc.custom_jos_direccion;\r\n        const country = frm.doc.custom_jos_country;\r\n\r\n        if (!(city && direccion && country)) {\r\n            frappe.msgprint(\"Faltan campos: City2, Dirección o País.\");\r\n            return;\r\n        }\r\n\r\n        // Step 1: Check if there's a linked Address via Dynamic Link\r\n        frappe.call({\r\n            method: \"frappe.client.get_list\",\r\n            args: {\r\n                doctype: \"Address\",\r\n                filters: {\r\n                    links: {\r\n                        link_doctype: \"Customer\",\r\n                        link_name: frm.doc.name\r\n                    }\r\n                },\r\n                fields: [\"name\"],\r\n                limit_page_length: 1\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.length > 0) {\r\n                    // Update existing linked address\r\n                    let address_name = r.message[0].name;\r\n                    frappe.call({\r\n                        method: \"frappe.client.set_value\",\r\n                        args: {\r\n                            doctype: \"Address\",\r\n                            name: address_name,\r\n                            fieldname: {\r\n                                city: city,\r\n                                address_line1: direccion,\r\n                                country: country\r\n                            }\r\n                        },\r\n                        callback: function() {\r\n                            frappe.msgprint(\"Dirección existente actualizada.\");\r\n                            frm.reload_doc();\r\n                        },\r\n                        error: function(err) {\r\n                            frappe.msgprint(\"❌ Error al actualizar la dirección: \" + err.message);\r\n                            console.error(\"Update Address Error\", err);\r\n                        }\r\n                    });\r\n                } else {\r\n                    // Create a new address\r\n                    const fallback_title = frm.doc.customer_name || `Auto-${frappe.datetime.now_datetime()}`;\r\n                    frappe.call({\r\n                        method: \"frappe.client.insert\",\r\n                        args: {\r\n                            doc: {\r\n                                doctype: \"Address\",\r\n                                address_title: fallback_title,\r\n                                address_type: \"Billing\",\r\n                                city: city,\r\n                                address_line1: direccion,\r\n                                country: country,\r\n                                links: [\r\n                                    {\r\n                                        link_doctype: \"Customer\",\r\n                                        link_name: frm.doc.name\r\n                                    }\r\n                                ]\r\n                            }\r\n                        },\r\n                        callback: function(res) {\r\n                            if (res.message && res.message.name) {\r\n                                frappe.msgprint(\"Nueva dirección creada: \" + res.message.name);\r\n                                frm.reload_doc();\r\n                            }\r\n                        },\r\n                        error: function(err) {\r\n                            frappe.msgprint(\"❌ Error al crear la dirección: \" + err.message);\r\n                            console.error(\"Insert Address Error\", err);\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            error: function(err) {\r\n                frappe.msgprint(\"❌ Error al buscar direcciones: \" + err.message);\r\n                console.error(\"Address Lookup Error\", err);\r\n            }\r\n        });\r\n    },\r\n\r\n    onload: function(frm) {\r\n        // Hide in Quick Entry\r\n        if (frm.is_new() && frm.meta.quick_entry) {\r\n            setTimeout(() => {\r\n                $(\".address-and-contact\").hide();\r\n            }, 300);\r\n        }\r\n\r\n        // Hide custom fields from full form\r\n        frm.set_df_property(\"custom_jos_city2\", \"hidden\", 1);\r\n        frm.set_df_property(\"custom_jos_direccion\", \"hidden\", 1);\r\n        frm.set_df_property(\"custom_jos_country\", \"hidden\", 1);\r\n\r\n        // Hide Address/Contact sections\r\n        setTimeout(() => {\r\n            $('div.section-head:contains(\"Primary Contact Details\")').closest('.section').hide();\r\n            $('div.section-head:contains(\"Primary Address Details\")').closest('.section').hide();\r\n        }, 300);\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2025-07-15 21:47:49.141999",
  "module": null,
  "name": "Customer - Sync Nombre Cliente",
  "script": "frappe.ui.form.on('Customer', {\r\n    custom_jos_nombre_cliente: function(frm) {\r\n        if (frm.doc.custom_jos_nombre_cliente) {\r\n            frm.set_value('customer_name', frm.doc.custom_jos_nombre_cliente);\r\n        }\r\n    },\r\n\r\n    // Optional: on load, sync the other way if needed\r\n    onload: function(frm) {\r\n        if (!frm.doc.custom_jos_nombre_cliente && frm.doc.customer_name) {\r\n            frm.set_value('custom_jos_nombre_cliente', frm.doc.customer_name);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 }
]