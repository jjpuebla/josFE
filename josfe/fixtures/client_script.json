[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2025-07-18 11:13:40.427362",
  "module": "ClienteSetup",
  "name": "Jos_Address-City-Sync-from_ecua_cities",
  "script": "/**\r\n * Address - Sync and UI Customization Script\r\n * -------------------------------------------\r\n * Purpose:\r\n * This script is executed on the Address Doctype form.\r\n * It performs two main functions:\r\n * \r\n * 1. Automatically copies the value from the custom field `custom_jos_ecua_cities`\r\n *    to the standard ERPNext `city` field. This ensures that custom input is\r\n *    synced with the system field used in reports, filters, etc.\r\n * \r\n * 2. Hides the `city` field in the form to prevent user confusion or double input.\r\n *    This is done at the UI level using `frm.set_df_property` so it does not affect the\r\n *    underlying metadata or database schema (unlike Property Setter).\r\n */\r\n\r\nfrappe.ui.form.on('Address', {\r\n    onload: function(frm) {\r\n        // If the standard city field is empty but the custom field has a value,\r\n        // auto-fill it. This happens when loading a new or unsaved form.\r\n        if (!frm.doc.city && frm.doc.custom_jos_ecua_cities) {\r\n            frm.set_value('city', frm.doc.custom_jos_ecua_cities);\r\n        }\r\n\r\n        // Hide the standard city field in the UI.\r\n        // This avoids user confusion between native and custom fields.\r\n        // It does NOT create a permanent Property Setter ‚Äî only affects UI.\r\n        frm.set_df_property(\"city\", \"hidden\", 1);\r\n    },\r\n\r\n    validate: function(frm) {\r\n        // Ensure the sync between custom and native field is enforced on save.\r\n        // Even if the user never touched the field manually, the value is copied over.\r\n        if (frm.doc.custom_jos_ecua_cities && frm.doc.city !== frm.doc.custom_jos_ecua_cities) {\r\n            frm.set_value('city', frm.doc.custom_jos_ecua_cities);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Company",
  "enabled": 1,
  "modified": "2025-07-19 18:59:51.936284",
  "module": "My_Data",
  "name": "Jos_Validacion_Certificado_P12",
  "script": "frappe.ui.form.on('Company', {\r\n    onload(frm) {\r\n        if (!frm.custom_firma_btn_rendered) {\r\n            frm.fields_dict.custom_jos_firma_electronica.$wrapper.append(`\r\n                <div style=\"margin-top: 10px; margin-bottom: 20px;\">\r\n                    <button type=\"button\" class=\"btn btn-primary\" id=\"btn-validar-firma\">\r\n                        ‚úÖ Validar Firma y Transmitir XML a SRI\r\n                    </button>\r\n                </div>\r\n            `);\r\n\r\n            frm.fields_dict.custom_jos_firma_electronica.$wrapper.find('#btn-validar-firma').on('click', function () {\r\n                frappe.prompt([\r\n                    {\r\n                        fieldname: 'password',\r\n                        label: 'Ingrese la contrase√±a del archivo .p12',\r\n                        fieldtype: 'Password',\r\n                        reqd: 1\r\n                    }\r\n                ], (values) => {\r\n                    const password = values.password;\r\n                    if (!password || password.trim() === \"\") {\r\n                        frappe.msgprint(\"‚ö†Ô∏è Debes ingresar la contrase√±a.\");\r\n                        return;\r\n                    }\r\n                    frappe.call({\r\n                        method: \"josfe.api.firma_combined.convertir_y_validar\",\r\n                        args: {\r\n                            company_name: frm.doc.name,\r\n                            p12_password: password\r\n                        },\r\n                        callback: function (res) {\r\n                            if (res.message && res.message.status === \"success\") {\r\n                                frm.set_value(\"custom_jos_ruc_certificado\", res.message.ruc);\r\n                                frm.set_value(\"custom_jos_fecha_expiracion\", res.message.fecha_expiracion);\r\n\r\n                                frm.fields_dict.custom_jos_ruc_certificado.$wrapper.find(\"input\").css(\"background-color\", \"#e6ffe6\");\r\n                                frm.fields_dict.custom_jos_fecha_expiracion.$wrapper.find(\"input\").css(\"background-color\", \"#e6ffe6\");\r\n\r\n                                frappe.call({\r\n                                    method: \"josfe.api.transmitir_sri.transmitir_xml\",\r\n                                    args: {\r\n                                        company_name: frm.doc.name\r\n                                    },\r\n                                    callback: function (r2) {\r\n                                        frappe.msgprint({\r\n                                            title: \"üì§ Transmisi√≥n Exitosa\",\r\n                                            message: \"‚úÖ Proceso completado. XML transmitido.\",\r\n                                            indicator: \"green\"\r\n                                        });\r\n                                    }\r\n                                });\r\n\r\n                            } else {\r\n                                frappe.msgprint({\r\n                                    title: \"‚ùå Error\",\r\n                                    message: res.message.msg || \"Error durante la validaci√≥n.\",\r\n                                    indicator: \"red\"\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                }, 'Validaci√≥n de Firma Electr√≥nica');\r\n            });\r\n\r\n            frm.custom_firma_btn_rendered = true;\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Company",
  "enabled": 0,
  "modified": "2025-07-30 09:47:30.403415",
  "module": "My_Data",
  "name": "Jos_Tax_Id_Validador_Company",
  "script": "frappe.ui.form.on('Company', {\n    custom_jos_ruc: function(frm) {\n        const raw_input = (frm.doc.custom_jos_ruc || '').trim().toUpperCase();\n\n        function setFieldColor(color) {\n            const inputField = $(`[data-fieldname=\"custom_jos_ruc\"] input`);\n            if (inputField.length) {\n                inputField.css(\"background-color\", color);\n            }\n        }\n\n        if (!raw_input) {\n            setFieldColor('');\n            return;\n        }\n\n        const is_passport = raw_input.startsWith(\"P-\");\n        const id = is_passport ? raw_input.slice(2) : raw_input;\n\n        if (is_passport) {\n            setFieldColor('#e2f0fb'); // blue\n        } else if (id === \"9999999999999\") {\n            setFieldColor('#fff3cd'); // yellow\n        } else if (validateEcuadorID(id)) {\n            setFieldColor('#d4edda'); // green\n        } else {\n            setFieldColor('#f8d7da'); // red\n        }\n\n        function validateEcuadorID(id) {\n            if (!/^\\d{10}(\\d{3})?$/.test(id)) return false;\n\n            const province = parseInt(id.slice(0, 2));\n            if (province < 1 || province > 24) return false;\n\n            const third_digit = parseInt(id[2]);\n            if (third_digit < 6) return validateCedula(id.slice(0, 10));\n            if (third_digit === 6) return validatePublicRUC(id);\n            if (third_digit === 9) return validatePrivateRUC(id);\n\n            return false;\n        }\n\n        function validateCedula(cedula) {\n            const digits = cedula.split('').map(Number);\n            const check_digit = digits.pop();\n            let total = 0;\n            for (let i = 0; i < digits.length; i++) {\n                let val = digits[i];\n                if (i % 2 === 0) {\n                    val *= 2;\n                    if (val > 9) val -= 9;\n                }\n                total += val;\n            }\n            const computed = (10 - (total % 10)) % 10;\n            return check_digit === computed;\n        }\n\n        function validatePublicRUC(ruc) {\n            if (ruc.length !== 13 || !ruc.endsWith(\"0001\")) return false;\n            const coeffs = [3, 2, 7, 6, 5, 4, 3, 2];\n            const digits = ruc.split('').map(Number);\n            const total = coeffs.reduce((sum, c, i) => sum + digits[i] * c, 0);\n            const check = 11 - (total % 11);\n            return digits[8] === (check === 11 ? 0 : check);\n        }\n\n        function validatePrivateRUC(ruc) {\n            if (ruc.length !== 13 || !ruc.endsWith(\"001\")) return false;\n            const coeffs = [4, 3, 2, 7, 6, 5, 4, 3, 2];\n            const digits = ruc.split('').map(Number);\n            const total = coeffs.reduce((sum, c, i) => sum + digits[i] * c, 0);\n            const check = 11 - (total % 11);\n            return digits[9] === (check === 11 ? 0 : check);\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 0,
  "modified": "2025-07-30 09:47:21.150361",
  "module": "Compras",
  "name": "Jos_Tax_Id_Validador_Supplier",
  "script": "frappe.ui.form.on('Supplier', {\n    custom_jos_ruc_supplier: function(frm) {\n        const raw_input = (frm.doc.custom_jos_ruc_supplier || '').trim().toUpperCase();\n\n        function setFieldColor(color) {\n            const inputField = $(`[data-fieldname=\"custom_jos_ruc_supplier\"] input`);\n            if (inputField.length) {\n                inputField.css(\"background-color\", color);\n            }\n        }\n\n        if (!raw_input) {\n            setFieldColor('');\n            return;\n        }\n\n        const is_passport = raw_input.startsWith(\"P-\");\n        const id = is_passport ? raw_input.slice(2) : raw_input;\n\n        if (is_passport) {\n            setFieldColor('#e2f0fb'); // blue\n        } else if (id === \"9999999999999\") {\n            setFieldColor('#fff3cd'); // yellow\n        } else if (validateEcuadorID(id)) {\n            setFieldColor('#d4edda'); // green\n        } else {\n            setFieldColor('#f8d7da'); // red\n        }\n\n        function validateEcuadorID(id) {\n            if (!/^\\d{10}(\\d{3})?$/.test(id)) return false;\n\n            const province = parseInt(id.slice(0, 2));\n            if (province < 1 || province > 24) return false;\n\n            const third_digit = parseInt(id[2]);\n            if (third_digit < 6) return validateCedula(id.slice(0, 10));\n            if (third_digit === 6) return validatePublicRUC(id);\n            if (third_digit === 9) return validatePrivateRUC(id);\n\n            return false;\n        }\n\n        function validateCedula(cedula) {\n            const digits = cedula.split('').map(Number);\n            const check_digit = digits.pop();\n            let total = 0;\n            for (let i = 0; i < digits.length; i++) {\n                let val = digits[i];\n                if (i % 2 === 0) {\n                    val *= 2;\n                    if (val > 9) val -= 9;\n                }\n                total += val;\n            }\n            const computed = (10 - (total % 10)) % 10;\n            return check_digit === computed;\n        }\n\n        function validatePublicRUC(ruc) {\n            if (ruc.length !== 13 || !ruc.endsWith(\"0001\")) return false;\n            const coeffs = [3, 2, 7, 6, 5, 4, 3, 2];\n            const digits = ruc.split('').map(Number);\n            const total = coeffs.reduce((sum, c, i) => sum + digits[i] * c, 0);\n            const check = 11 - (total % 11);\n            return digits[8] === (check === 11 ? 0 : check);\n        }\n\n        function validatePrivateRUC(ruc) {\n            if (ruc.length !== 13 || !ruc.endsWith(\"001\")) return false;\n            const coeffs = [4, 3, 2, 7, 6, 5, 4, 3, 2];\n            const digits = ruc.split('').map(Number);\n            const total = coeffs.reduce((sum, c, i) => sum + digits[i] * c, 0);\n            const check = 11 - (total % 11);\n            return digits[9] === (check === 11 ? 0 : check);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Company",
  "enabled": 1,
  "modified": "2025-07-21 01:05:57.356360",
  "module": "My_Data",
  "name": "Jos_Update_Matriz_Direccion",
  "script": "frappe.ui.form.on('Jos_Establecimientos', {\r\n    jos_matriz: function(frm, cdt, cdn) {\r\n        const selected_row = locals[cdt][cdn];\r\n\r\n        // Count how many other rows are already checked\r\n        const checked_others = (frm.doc.custom_jos_tabla_estab || []).filter(\r\n            row => row.jos_matriz && row.name !== selected_row.name\r\n        );\r\n\r\n        // If another row is already checked and this one is trying to be checked too\r\n        if (checked_others.length > 0 && selected_row.jos_matriz) {\r\n            frappe.msgprint({\r\n                title: \"Solo una matriz permitida\",\r\n                message: \"Ya hay un establecimiento marcado como matriz. Solo se permite uno.\",\r\n                indicator: \"red\"\r\n            });\r\n\r\n            // Cancel the current checkbox toggle\r\n            selected_row.jos_matriz = 0;\r\n            frm.refresh_field('custom_jos_tabla_estab');\r\n            return;\r\n        }\r\n\r\n        // If this row is being checked, update direcci√≥n matriz\r\n        if (selected_row.jos_matriz) {\r\n            frm.set_value('custom_jos_direccion_matriz', selected_row.jos_address || '');\r\n        } else {\r\n            // If unchecked, update based on any other checked row\r\n            const still_checked = (frm.doc.custom_jos_tabla_estab || []).find(row => row.jos_matriz);\r\n            frm.set_value('custom_jos_direccion_matriz', still_checked?.jos_address || '');\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Company",
  "enabled": 1,
  "modified": "2025-07-22 01:15:35.750235",
  "module": "My_Data",
  "name": "Jos_ChildTable_Sucursales",
  "script": "frappe.ui.form.on('Company', {\r\n  onload: function(frm) {\r\n    // 1. Inject naming series options into the child table field\r\n    frappe.call({\r\n      method: \"josfe.api.naming_series.get_naming_series_options_for\",\r\n      args: { doctype: \"Sales Invoice\" },\r\n      callback: function(res) {\r\n        if (res.message) {\r\n          const series_options = res.message.map(r => r.name);\r\n\r\n          frm.fields_dict.custom_jos_tabla_estab.grid.update_docfield_property(\r\n            \"jos_naming_series\",\r\n            \"options\",\r\n            series_options.join('\\n')\r\n          );\r\n\r\n          frm.refresh_field(\"custom_jos_tabla_estab\");\r\n        }\r\n      }\r\n    });\r\n\r\n    // 2. (Optional) Limit jos_warehouse to group warehouses under a parent\r\n    frm.fields_dict.custom_jos_tabla_estab.grid.get_field('jos_warehouse').get_query = function(doc, cdt, cdn) {\r\n      return {\r\n        filters: {\r\n          parent_warehouse: \"All Warehouses - A\",\r\n          is_group: 1\r\n        }\r\n      };\r\n    };\r\n  }\r\n});\r\n\r\nfrappe.ui.form.on('Jos_Establecimientos', {\r\n  jos_warehouse: function(frm, cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n\r\n    if (row.jos_warehouse) {\r\n      frappe.call({\r\n        method: \"josfe.api.naming_series.get_address_for_warehouse\",\r\n        args: {\r\n          warehouse: row.jos_warehouse\r\n        },\r\n        callback: function(res) {\r\n          if (res.message) {\r\n            frappe.model.set_value(cdt, cdn, \"jos_address\", res.message);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Company",
  "enabled": 1,
  "modified": "2025-07-22 23:39:23.716667",
  "module": "My_Data",
  "name": "Jos_RazonSocial_Sync_CompanyName",
  "script": "frappe.ui.form.on('Company', {\r\n  onload: function(frm) {\r\n    // Force company_name to be read-only and visible\r\n    frm.set_df_property('company_name', 'read_only', 1);\r\n    frm.set_df_property('company_name', 'bold', 1);\r\n    frm.set_df_property('company_name', 'hidden', 0);\r\n\r\n    // Force re-render if needed\r\n    frm.refresh_field('company_name');\r\n  },\r\n\r\n  custom_jos_razon_social: function(frm) {\r\n    if (frm.doc.custom_jos_razon_social) {\r\n      frm.set_value('company_name', frm.doc.custom_jos_razon_social);\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2025-07-30 09:47:04.224246",
  "module": "ClienteSetup",
  "name": "Jos_Tax_Id_Validador_Customer",
  "script": "frappe.ui.form.on('Customer', {\n    custom_jos_tax_id_validador: function(frm) {\n        const raw_input = (frm.doc.custom_jos_tax_id_validador || '').trim().toUpperCase();\n\n        function setFieldColor(color) {\n            const inputField = $(`[data-fieldname=\"custom_jos_tax_id_validador\"] input`);\n            if (inputField.length) {\n                inputField.css(\"background-color\", color);\n            }\n        }\n\n        if (!raw_input) {\n            setFieldColor('');\n            return;\n        }\n\n        const is_passport = raw_input.startsWith(\"P-\");\n        const id = is_passport ? raw_input.slice(2) : raw_input;\n\n        if (is_passport) {\n            setFieldColor('#e2f0fb'); // blue\n        } else if (id === \"9999999999999\") {\n            setFieldColor('#fff3cd'); // yellow\n        } else if (validateEcuadorID(id)) {\n            setFieldColor('#d4edda'); // green\n        } else {\n            setFieldColor('#f8d7da'); // red\n        }\n\n        function validateEcuadorID(id) {\n            if (!/^\\d{10}(\\d{3})?$/.test(id)) return false;\n\n            const province = parseInt(id.slice(0, 2));\n            if (province < 1 || province > 24) return false;\n\n            const third_digit = parseInt(id[2]);\n            if (third_digit < 6) return validateCedula(id.slice(0, 10));\n            if (third_digit === 6) return validatePublicRUC(id);\n            if (third_digit === 9) return validatePrivateRUC(id);\n\n            return false;\n        }\n\n        function validateCedula(cedula) {\n            const digits = cedula.split('').map(Number);\n            const check_digit = digits.pop();\n            let total = 0;\n            for (let i = 0; i < digits.length; i++) {\n                let val = digits[i];\n                if (i % 2 === 0) {\n                    val *= 2;\n                    if (val > 9) val -= 9;\n                }\n                total += val;\n            }\n            const computed = (10 - (total % 10)) % 10;\n            return check_digit === computed;\n        }\n\n        function validatePublicRUC(ruc) {\n            if (ruc.length !== 13 || !ruc.endsWith(\"0001\")) return false;\n            const coeffs = [3, 2, 7, 6, 5, 4, 3, 2];\n            const digits = ruc.split('').map(Number);\n            const total = coeffs.reduce((sum, c, i) => sum + digits[i] * c, 0);\n            const check = 11 - (total % 11);\n            return digits[8] === (check === 11 ? 0 : check);\n        }\n\n        function validatePrivateRUC(ruc) {\n            if (ruc.length !== 13 || !ruc.endsWith(\"001\")) return false;\n            const coeffs = [4, 3, 2, 7, 6, 5, 4, 3, 2];\n            const digits = ruc.split('').map(Number);\n            const total = coeffs.reduce((sum, c, i) => sum + digits[i] * c, 0);\n            const check = 11 - (total % 11);\n            return digits[9] === (check === 11 ? 0 : check);\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2025-07-31 01:10:14.121504",
  "module": "ClienteSetup",
  "name": "Jos_Customer_Fields_UI",
  "script": "/**\r\n * Customer Form Fields Setup\r\n * ------------------------------------------------------------\r\n\r\n */\r\n\r\nfrappe.ui.form.on('Customer', {\r\n    // üîÑ When user edits the custom name field, update the standard name\r\n    custom_jos_nombre_cliente: function(frm) {\r\n        if (frm.doc.custom_jos_nombre_cliente) {\r\n            frm.set_value('customer_name', frm.doc.custom_jos_nombre_cliente);\r\n        }\r\n    },\r\n\r\n    // üß† On form load, optionally initialize the custom field with customer_name if missing\r\n    onload: function(frm) {\r\n        if (!frm.doc.custom_jos_nombre_cliente && frm.doc.customer_name) {\r\n            frm.set_value('custom_jos_nombre_cliente', frm.doc.customer_name);\r\n        }\r\n// \t\tfrm.set_df_property(\"customer_name\", \"read_only\", 1);\r\n// \t\tfrm.set_df_property(\"tax_id\", \"read_only\", 1);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2025-07-24 14:48:37.660373",
  "module": "Compras",
  "name": "Jos_Supplier_Fields_UI",
  "script": "/**\r\n * Supplier Form Fields Setup\r\n * ------------------------------------------------------------\r\n\r\n */\r\n\r\nfrappe.ui.form.on('Supplier', {\r\n    // üîÑ When user edits the custom name field, update the standard name\r\n    custom_jos_nombre_proveedor: function(frm) {\r\n        if (frm.doc.custom_jos_nombre_proveedor\r\n    ) {\r\n            frm.set_value('supplier_name', frm.doc.custom_jos_nombre_proveedor);\r\n        }\r\n    },\r\n\r\n    // üß† On form load, optionally initialize the custom field with customer_name if missing\r\n    onload: function(frm) {\r\n        if (!frm.doc.custom_jos_nombre_proveedor && frm.doc.supplier_name) {\r\n            frm.set_value('custom_jos_nombre_proveedor', frm.doc.supplier_name);\r\n        }\r\n\t\tfrm.set_df_property(\"supplier_name\", \"read_only\", 1);\r\n\t\tfrm.set_df_property(\"tax_id\", \"read_only\", 1);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2025-07-28 22:20:57.523824",
  "module": "My_Data",
  "name": "Jos_Mascara_Telefono_Customer",
  "script": "frappe.ui.form.on('Customer', {\r\n  refresh(frm) {\r\n    frappe.require(\"/assets/josfe/js/phone_utils.js\", function () {\r\n      console.log(\"üìã Running phone_utils setup for Customer\");\r\n      setupPhoneMaskingAndWhatsapp(frm, \"custom_jos_telefonos\");\r\n    });\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Contact",
  "enabled": 0,
  "modified": "2025-07-29 10:40:26.153321",
  "module": "My_Data",
  "name": "Jos_Ext_Whatsapp_read-only",
  "script": "frappe.ui.form.on('Contact', {\r\n  onload_post_render(frm) {\r\n    // Only apply read-only if this is the auto-synced \"Main Contact\"\r\n    const main_contact_prefix = 'Main Contact for ';\r\n    if (frm.doc.first_name && frm.doc.first_name.startsWith(main_contact_prefix)) {\r\n      frm.fields_dict.phone_nos.grid.grid_rows.forEach(row => {\r\n        frappe.utils.filter_dict(row.docfields, { fieldname: 'jos_phone_ext' }).forEach(df => {\r\n          df.read_only = 1;\r\n          df.description = 'Managed from Customer/Supplier';\r\n        });\r\n        frappe.utils.filter_dict(row.docfields, { fieldname: 'jos_whatsapp' }).forEach(df => {\r\n          df.read_only = 1;\r\n          df.description = 'Managed from Customer/Supplier';\r\n        });\r\n      });\r\n    }\r\n  }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Contact",
  "enabled": 1,
  "modified": "2025-07-29 09:35:51.401487",
  "module": "My_Data",
  "name": "Jos_MainContact_Read-only",
  "script": "frappe.ui.form.on('Contact', {\r\n  onload(frm) {\r\n    maybe_lock_main_contact(frm);\r\n  },\r\n  refresh(frm) {\r\n    maybe_lock_main_contact(frm);\r\n  }\r\n});\r\n\r\nfunction maybe_lock_main_contact(frm) {\r\n  const first_name = (frm.doc.first_name || '').trim();\r\n\r\n  const is_main_contact = /^Main Contact (Clte|Prov)-.+/.test(first_name);\r\n  if (!is_main_contact) {\r\n    frm.__main_contact_warning_inserted = false;\r\n    frm.$wrapper.find('.main-contact-warning').remove();\r\n    return;\r\n  }\r\n\r\n  // Insert warning only once\r\n  if (!frm.__main_contact_warning_inserted && frm.fields_dict.first_name) {\r\n    const msg_html = `\r\n      <div class=\"alert alert-danger main-contact-warning\" style=\"margin-bottom: 15px;\">\r\n        <strong>‚ö† Atenci√≥n:</strong> Este es un Contacto Principal. Si desea editar h√°galo desde la pesta√±a <strong>'Entrada R√°pida'</strong> del Cliente o Proveedor.\r\n      </div>`;\r\n    const $msg = $('<div></div>').html(msg_html);\r\n    frm.fields_dict.first_name.$wrapper.before($msg);\r\n    frm.__main_contact_warning_inserted = true;\r\n  }\r\n\r\n  // Make all fields read-only\r\n  frm.fields.forEach(field => {\r\n    frm.set_df_property(field.df.fieldname, 'read_only', 1);\r\n  });\r\n\r\n  // Disable phone and email tables specifically\r\n  frm.set_df_property('phone_nos', 'read_only', 1);\r\n  frm.set_df_property('email_ids', 'read_only', 1);\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2025-07-29 09:37:43.293100",
  "module": "My_Data",
  "name": "Jos_MainAddress-Read-only",
  "script": "frappe.ui.form.on('Address', {\r\n  onload(frm) {\r\n    maybe_lock_main_address(frm);\r\n  },\r\n  refresh(frm) {\r\n    maybe_lock_main_address(frm);\r\n  }\r\n});\r\n\r\nfunction maybe_lock_main_address(frm) {\r\n  const address_title = (frm.doc.address_title || '').trim();\r\n\r\n  const is_main_address = /^Main Dir\\. para (Clte|Prov)-.+/.test(address_title);\r\n  if (!is_main_address) {\r\n    frm.__main_address_warning_inserted = false;\r\n    frm.$wrapper.find('.main-address-warning').remove();\r\n    return;\r\n  }\r\n\r\n  // Show warning once\r\n  if (!frm.__main_address_warning_inserted && frm.fields_dict.address_title) {\r\n    const msg_html = `\r\n      <div class=\"alert alert-danger main-address-warning\" style=\"margin-bottom: 15px;\">\r\n        <strong>‚ö† Atenci√≥n:</strong> Esta es una Direcci√≥n Principal. Si desea editar h√°galo desde la pesta√±a <strong>'Entrada R√°pida'</strong> del Cliente o Proveedor.\r\n      </div>`;\r\n    const $msg = $('<div></div>').html(msg_html);\r\n    frm.fields_dict.address_title.$wrapper.before($msg);\r\n    frm.__main_address_warning_inserted = true;\r\n  }\r\n\r\n  // Lock all fields\r\n  frm.fields.forEach(field => {\r\n    frm.set_df_property(field.df.fieldname, 'read_only', 1);\r\n  });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 0,
  "modified": "2025-07-28 01:23:53.965749",
  "module": "My_Data",
  "name": "Jos_Phone+Ext+WhApp_HTML_Sup",
  "script": "frappe.ui.form.on('Customer', {\r\n  refresh(frm) {\r\n    frappe.after_ajax(() => {\r\n      enhanceAllContactHTML(frm, 'Customer');\r\n    });\r\n  }\r\n});\r\n\r\nasync function enhanceAllContactHTML(frm, link_doctype) {\r\n  const wrapper = cur_frm.fields_dict.contact_html?.$wrapper?.get(0);\r\n  if (!wrapper) return;\r\n\r\n  // Step 1: Get all Contacts with their links\r\n  const contacts = await frappe.db.get_list(\"Contact\", {\r\n    fields: [\"name\", \"first_name\"],\r\n    limit: 50  // adjust if needed\r\n  });\r\n\r\n  // Step 2: Fetch full docs and filter by link manually\r\n  const linkedContacts = [];\r\n\r\n  for (const contact of contacts) {\r\n    const fullDoc = await frappe.call('frappe.client.get', {\r\n      doctype: 'Contact',\r\n      name: contact.name\r\n    });\r\n\r\n    const links = fullDoc.message.links || [];\r\n    const isLinked = links.some(link =>\r\n      link.link_doctype === link_doctype && link.link_name === frm.doc.name\r\n    );\r\n\r\n    if (isLinked) linkedContacts.push(fullDoc.message);\r\n  }\r\n\r\n  // Step 3: Enhance HTML for each matching contact\r\n  const blocks = wrapper.querySelectorAll(\".address-box\");\r\n  let injectedAny = false;\r\n\r\n  for (const contact of linkedContacts) {\r\n    const enhancedPhones = (contact.phone_nos || []).map(row => {\r\n      let text = row.phone;\r\n      if (row.jos_phone_ext) text += ` ext. ${row.jos_phone_ext}`;\r\n      if (row.jos_whatsapp) {\r\n        text += ` <img src=\"https://cdn-icons-png.flaticon.com/24/733/733585.png\" \r\n                    style=\"height:14px;margin-left:4px;\" alt=\"WhatsApp\">`;\r\n      }\r\n      return text;\r\n    });\r\n\r\n    blocks.forEach(box => {\r\n      if (box.innerText.includes(contact.first_name)) {\r\n        const telTags = box.querySelectorAll(\"a[href^='tel:']\");\r\n        telTags.forEach((tag, i) => {\r\n          if (enhancedPhones[i]) {\r\n            tag.innerHTML = enhancedPhones[i];\r\n            injectedAny = true;\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  if (!injectedAny) {\r\n    frappe.msgprint({\r\n      title: \"‚ö†Ô∏è No se pudo actualizar extensiones\",\r\n      message: \"No se encontr√≥ coincidencia visual para los contactos vinculados.\",\r\n      indicator: 'orange'\r\n    });\r\n  }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Contact",
  "enabled": 0,
  "modified": "2025-07-28 15:34:35.496664",
  "module": "My_Data",
  "name": "Jos_Mascara_Telefono_Contacts",
  "script": "frappe.ui.form.on('Contact', {\r\n    refresh(frm) {\r\n        setTimeout(() => {\r\n            const grid = frm.fields_dict.phone_nos?.grid;\r\n            \r\n            // Enable/disable WhatsApp checkbox based on phone number\r\n            grid.wrapper.on('change', 'input[data-fieldname=\"phone\"]', function (e) {\r\n              const $row = $(e.target).closest('.grid-row');\r\n              const phone = e.target.value.replace(/\\D/g, '');\r\n              const startsWith09 = phone.startsWith('09');\r\n              const $wa = $row.find('input[data-fieldname=\"jos_whatsapp\"]');\r\n            \r\n              if ($wa.length) {\r\n                $wa.prop('disabled', !startsWith09);\r\n                if (!startsWith09) $wa.prop('checked', false);\r\n              }\r\n            });\r\n\r\n            if (!grid) return;\r\n\r\n            // Apply behavior for input\r\n            grid.wrapper.on('input', 'input[data-fieldname=\"phone\"]', function (e) {\r\n                let raw = e.target.value.replace(/\\D/g, '');\r\n                e.target.value = formatWithMask(raw);\r\n            });\r\n\r\n            grid.wrapper.on('focus', 'input[data-fieldname=\"phone\"]', function (e) {\r\n                const raw = e.target.value.replace(/\\D/g, '');\r\n                if (!raw) {\r\n                    e.target.value = getDynamicMask('');\r\n                }\r\n                setTimeout(() => {\r\n                    e.target.setSelectionRange(0, 0);\r\n                }, 0);\r\n            });\r\n\r\n            grid.wrapper.on('blur', 'input[data-fieldname=\"phone\"]', function (e) {\r\n                const val = e.target.value.replace(/[-_]/g, '').trim();\r\n                if (!val) {\r\n                    e.target.value = '';\r\n                }\r\n            });\r\n\r\n            grid.wrapper.on('keydown', 'input[data-fieldname=\"phone\"]', function (e) {\r\n                if (e.key === 'Backspace') {\r\n                    e.preventDefault();\r\n                    let raw = e.target.value.replace(/\\D/g, '');\r\n                    raw = raw.slice(0, -1);\r\n                    e.target.value = formatWithMask(raw);\r\n                }\r\n            });\r\n\r\n            function getDynamicMask(digits) {\r\n                if (digits.startsWith('09')) return '___-___-____';\r\n                if (digits.length >= 2 && digits.startsWith('0') && digits[1] >= '2' && digits[1] <= '8') return '___-___-___';\r\n                if (digits[0] >= '2' && digits[0] <= '9') return '___-____';\r\n                return '___-___-____';\r\n            }\r\n\r\n            function formatWithMask(digits) {\r\n                const mask = getDynamicMask(digits);\r\n                let result = '';\r\n                let i = 0;\r\n                for (let char of mask) {\r\n                    result += (char === '_') ? (digits[i] || '_') : char;\r\n                    if (char === '_') i++;\r\n                }\r\n                return result;\r\n            }\r\n        }, 300);\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 0,
  "modified": "2025-07-28 15:34:41.440530",
  "module": "My_Data",
  "name": "Jos_Mascara_Telefono_Supplier",
  "script": "frappe.ui.form.on('Supplier', {\r\n    refresh(frm) {\r\n        setTimeout(() => {\r\n            const grid = frm.fields_dict.custom_jos_telefonos.grid;\r\n            \r\n            // Enable/disable WhatsApp checkbox based on phone number\r\n            grid.wrapper.on('change', 'input[data-fieldname=\"phone\"]', function (e) {\r\n              const $row = $(e.target).closest('.grid-row');\r\n              const phone = e.target.value.replace(/\\D/g, '');\r\n              const startsWith09 = phone.startsWith('09');\r\n              const $wa = $row.find('input[data-fieldname=\"jos_whatsapp\"]');\r\n            \r\n              if ($wa.length) {\r\n                $wa.prop('disabled', !startsWith09);\r\n                if (!startsWith09) $wa.prop('checked', false);\r\n              }\r\n            });\r\n\r\n            if (!grid) return;\r\n\r\n            // Handle typing input\r\n            grid.wrapper.on('input', 'input[data-fieldname=\"phone\"]', function (e) {\r\n                let raw = e.target.value.replace(/\\D/g, '');\r\n                e.target.value = formatWithMask(raw);\r\n            });\r\n\r\n            // On focus, show mask if empty, and move caret to beginning\r\n            grid.wrapper.on('focus', 'input[data-fieldname=\"phone\"]', function (e) {\r\n                const raw = e.target.value.replace(/\\D/g, '');\r\n                if (!raw) {\r\n                    e.target.value = getDynamicMask('');\r\n                }\r\n\r\n                // Move caret to beginning\r\n                setTimeout(() => {\r\n                    e.target.setSelectionRange(0, 0);\r\n                }, 0);\r\n            });\r\n\r\n            // Clear if left blank\r\n            grid.wrapper.on('blur', 'input[data-fieldname=\"phone\"]', function (e) {\r\n                const val = e.target.value.replace(/[-_]/g, '').trim();\r\n                if (!val) {\r\n                    e.target.value = '';\r\n                }\r\n            });\r\n\r\n            // Handle backspace cleanly\r\n            grid.wrapper.on('keydown', 'input[data-fieldname=\"phone\"]', function (e) {\r\n                if (e.key === 'Backspace') {\r\n                    e.preventDefault();\r\n                    let raw = e.target.value.replace(/\\D/g, '');\r\n                    raw = raw.slice(0, -1); // remove last digit\r\n                    e.target.value = formatWithMask(raw);\r\n                }\r\n            });\r\n\r\n            // Determine mask based on starting digits\r\n            function getDynamicMask(digits) {\r\n                if (digits.startsWith('09')) {\r\n                    return '___-___-____'; // mobile\r\n                }\r\n                if (\r\n                    digits.length >= 2 &&\r\n                    digits.startsWith('0') &&\r\n                    digits[1] >= '2' &&\r\n                    digits[1] <= '8'\r\n                ) {\r\n                    return '___-___-___'; // landline\r\n                }\r\n                if (digits[0] >= '2' && digits[0] <= '9') {\r\n                    return '___-____'; // short local\r\n                }\r\n                return '___-___-____'; // default\r\n            }\r\n\r\n            // Format digits with dynamic mask\r\n            function formatWithMask(digits) {\r\n                const mask = getDynamicMask(digits);\r\n                let result = '';\r\n                let i = 0;\r\n                for (let char of mask) {\r\n                    if (char === '_') {\r\n                        result += digits[i] || '_';\r\n                        i++;\r\n                    } else {\r\n                        result += char;\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n        }, 300);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2025-07-30 22:08:50.783091",
  "module": "My_Data",
  "name": "Jos_Cus_Phone+Ext+WhApp_HTML",
  "script": "frappe.ui.form.on('Customer', {\r\n  refresh(frm) {\r\n    waitForContactBoxAndRun(() => {\r\n      enhanceContactHTML(frm, \"Customer\");\r\n    });\r\n  }\r\n});\r\n\r\nasync function enhanceContactHTML(frm, link_doctype) {\r\n//   console.log(`üì¶ Running enhanceContactHTML for ${link_doctype}: ${frm.doc.name}`);\r\n\r\n  const wrapper = frm.fields_dict.contact_html?.$wrapper?.get(0);\r\n  if (!wrapper) {\r\n    // console.warn(\"‚ùå wrapper for contact_html not found.\");\r\n    return;\r\n  }\r\n\r\n  const boxes = wrapper.querySelectorAll(\".address-box\");\r\n//   console.log(`üì¶ Found ${boxes.length} .address-box elements`);\r\n\r\n  const prefix = link_doctype === \"Customer\" ? \"Clte\" : \"Prov\";\r\n  const expected_contact_name = `Main Contact ${prefix}-${frm.doc.name}`;\r\n\r\n  const full = await frappe.call('frappe.client.get_list', {\r\n    doctype: 'Contact',\r\n    filters: [['first_name', '=', expected_contact_name]],\r\n    fields: ['name'],\r\n    limit: 1\r\n  });\r\n\r\n  if (!full.message.length) {\r\n    // console.warn(`‚ùå No contact found for ${expected_contact_name}`);\r\n    return;\r\n  }\r\n\r\n  const contact = await frappe.call('frappe.client.get', {\r\n    doctype: 'Contact',\r\n    name: full.message[0].name\r\n  });\r\n\r\n  const doc = contact.message;\r\n  const emails = (doc.email_ids || []).map(e => (e.email_id || \"\").toLowerCase());\r\n  const phones = (doc.phone_nos || []).map(p => (p.phone || \"\").replace(/\\D/g, \"\"));\r\n\r\n  const enhancedPhones = doc.phone_nos.map(row => {\r\n    let phone = row.phone.replace(/\\D/g, ''); // only digits\r\n    let text = row.phone;\r\n\r\n    if (row.jos_phone_ext) text += ` ext. ${row.jos_phone_ext}`;\r\n\r\n    if (row.jos_whatsapp) {\r\n      const whatsappUrl = `https://wa.me/593${phone}`;\r\n      text = `<a href=\"${whatsappUrl}\" target=\"_blank\" style=\"text-decoration: none; color: inherit;\">\r\n                ${row.phone}\r\n                <img src=\"https://cdn-icons-png.flaticon.com/24/733/733585.png\"\r\n                  style=\"height:14px;margin-left:4px;\" alt=\"WhatsApp\">\r\n              </a>`;\r\n    }\r\n\r\n    return text;\r\n  });\r\n\r\n  let injectedAny = false;\r\n\r\n  boxes.forEach(box => {\r\n    const boxText = box.innerText.toLowerCase().replace(/\\s+/g, ' ').trim();\r\n    const boxRaw = box.innerText.replace(/\\D/g, '');\r\n\r\n    const emailMatch = emails.find(email => email && boxText.includes(email));\r\n    const phoneMatch = phones.find(phone => phone && boxRaw.includes(phone));\r\n\r\n    // console.log(`üîç Matching contact: ${doc.first_name}`);\r\n    // console.log(\"   üîç Emails:\", emails);\r\n    // console.log(\"   üîç Phones:\", phones);\r\n    // console.log(\"   üîç Box Text:\", box.innerText);\r\n\r\n    if (emailMatch || phoneMatch) {\r\n      const telTags = box.querySelectorAll(\"a[href^='tel:']\");\r\n      telTags.forEach((tag, i) => {\r\n        if (enhancedPhones[i]) {\r\n        //   console.log(`‚úÖ Injecting phone[${i}] into box:`, enhancedPhones[i]);\r\n          tag.innerHTML = enhancedPhones[i];\r\n          injectedAny = true;\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  const hasDataToInject = doc.phone_nos?.some(p => p.phone || p.jos_phone_ext || p.jos_whatsapp) || (doc.email_ids?.length > 0);\r\n\r\n  if (!injectedAny && hasDataToInject && !frm.__ext_warning_shown) {\r\n    frappe.msgprint({\r\n      title: \"‚ö†Ô∏è No se pudo actualizar extensiones\",\r\n      message: \"No se encontr√≥ coincidencia visual para los contactos vinculados.\",\r\n      indicator: 'orange'\r\n    });\r\n    frm.__ext_warning_shown = true;\r\n  }\r\n\r\n}\r\n\r\nfunction waitForContactBoxAndRun(callback) {\r\n  const selector = \".address-box\";\r\n  if (document.querySelector(selector)) {\r\n    // console.log(\"‚ö° DOM already contains .address-box ‚Äî running callback immediately.\");\r\n    callback();\r\n    return;\r\n  }\r\n\r\n  const observer = new MutationObserver((mutations, obs) => {\r\n    if (document.querySelector(selector)) {\r\n    //   console.log(\"üü¢ .address-box rendered ‚Äî executing enhancement.\");\r\n      obs.disconnect();\r\n      callback();\r\n    }\r\n  });\r\n\r\n  observer.observe(document.body, {\r\n    childList: true,\r\n    subtree: true,\r\n  });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2025-07-31 01:43:33.465479",
  "module": "My_Data",
  "name": "Jos_Sup_Phone+Ext+WhApp_HTML",
  "script": "frappe.ui.form.on('Supplier', {\r\n  refresh(frm) {\r\n    waitForContactBoxAndRun(() => {\r\n      enhanceContactHTML(frm, \"Supplier\");\r\n    });\r\n  }\r\n});\r\n\r\nasync function enhanceContactHTML(frm, link_doctype) {\r\n  console.log(`üì¶ Running enhanceContactHTML for ${link_doctype}: ${frm.doc.name}`);\r\n\r\n  const wrapper = frm.fields_dict.contact_html?.$wrapper?.get(0);\r\n  if (!wrapper) {\r\n    console.warn(\"‚ùå wrapper for contact_html not found.\");\r\n    return;\r\n  }\r\n\r\n  const boxes = wrapper.querySelectorAll(\".address-box\");\r\n  console.log(`üì¶ Found ${boxes.length} .address-box elements`);\r\n\r\n  const prefix = link_doctype === \"Customer\" ? \"Clte\" : \"Prov\";\r\n  const expected_contact_name = `Main Contact ${prefix}-${frm.doc.name}`;\r\n\r\n  const full = await frappe.call('frappe.client.get_list', {\r\n    doctype: 'Contact',\r\n    filters: [['first_name', '=', expected_contact_name]],\r\n    fields: ['name'],\r\n    limit: 1\r\n  });\r\n\r\n  if (!full.message.length) {\r\n    console.warn(`‚ùå No contact found for ${expected_contact_name}`);\r\n    return;\r\n  }\r\n\r\n  const contact = await frappe.call('frappe.client.get', {\r\n    doctype: 'Contact',\r\n    name: full.message[0].name\r\n  });\r\n\r\n  const doc = contact.message;\r\n  const emails = (doc.email_ids || []).map(e => (e.email_id || \"\").toLowerCase());\r\n  const phones = (doc.phone_nos || []).map(p => (p.phone || \"\").replace(/\\D/g, \"\"));\r\n\r\n  const enhancedPhones = doc.phone_nos.map(row => {\r\n    let phone = row.phone.replace(/\\D/g, '');\r\n    let text = row.phone;\r\n\r\n    if (row.jos_phone_ext) text += ` ext. ${row.jos_phone_ext}`;\r\n\r\n    if (row.jos_whatsapp) {\r\n      const whatsappUrl = `https://wa.me/593${phone}`;\r\n      text = `<a href=\"${whatsappUrl}\" target=\"_blank\" style=\"text-decoration: none; color: inherit;\">\r\n                ${row.phone}\r\n                <img src=\"https://cdn-icons-png.flaticon.com/24/733/733585.png\"\r\n                  style=\"height:14px;margin-left:4px;\" alt=\"WhatsApp\">\r\n              </a>`;\r\n    }\r\n\r\n    return text;\r\n  });\r\n\r\n  let injectedAny = false;\r\n\r\n  boxes.forEach(box => {\r\n    const boxText = box.innerText.toLowerCase().replace(/\\s+/g, ' ').trim();\r\n    const boxRaw = box.innerText.replace(/\\D/g, '');\r\n\r\n    const emailMatch = emails.find(email => email && boxText.includes(email));\r\n    const phoneMatch = phones.find(phone => phone && boxRaw.includes(phone));\r\n\r\n    console.log(`üîç Matching contact: ${doc.first_name}`);\r\n    console.log(\"   üîç Emails:\", emails);\r\n    console.log(\"   üîç Phones:\", phones);\r\n    console.log(\"   üîç Box Text:\", box.innerText);\r\n\r\n    if (emailMatch || phoneMatch) {\r\n      const telTags = box.querySelectorAll(\"a[href^='tel:']\");\r\n      telTags.forEach((tag, i) => {\r\n        if (enhancedPhones[i]) {\r\n          console.log(`‚úÖ Injecting phone[${i}] into box:`, enhancedPhones[i]);\r\n          tag.innerHTML = enhancedPhones[i];\r\n          injectedAny = true;\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  const hasDataToInject = doc.phone_nos?.some(p => p.phone || p.jos_phone_ext || p.jos_whatsapp) || (doc.email_ids?.length > 0);\r\n\r\n  if (!injectedAny && hasDataToInject && !frm.__ext_warning_shown) {\r\n    frappe.msgprint({\r\n      title: \"‚ö†Ô∏è No se pudo actualizar extensiones\",\r\n      message: \"No se encontr√≥ coincidencia visual para los contactos vinculados.\",\r\n      indicator: 'orange'\r\n    });\r\n    frm.__ext_warning_shown = true;\r\n  }\r\n\r\n}\r\n\r\nfunction waitForContactBoxAndRun(callback) {\r\n  const selector = \".address-box\";\r\n  if (document.querySelector(selector)) {\r\n    console.log(\"‚ö° DOM already contains .address-box ‚Äî running callback immediately.\");\r\n    callback();\r\n    return;\r\n  }\r\n\r\n  const observer = new MutationObserver((mutations, obs) => {\r\n    if (document.querySelector(selector)) {\r\n      console.log(\"üü¢ .address-box rendered ‚Äî executing enhancement.\");\r\n      obs.disconnect();\r\n      callback();\r\n    }\r\n  });\r\n\r\n  observer.observe(document.body, {\r\n    childList: true,\r\n    subtree: true,\r\n  });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2025-07-30 08:13:59.530720",
  "module": "My_Data",
  "name": "Jos_Mask+Whap_Cust",
  "script": "frappe.ui.form.on('Customer', {\r\n    refresh(frm) {\r\n        // console.log(\"üìã Running phone_utils setup for Customer\");\r\n        frappe.require(\"/assets/josfe/js/phone_utils.js\", () => {\r\n            if (typeof josfe?.setupPhoneMaskingAndWhatsapp === \"function\") {\r\n                josfe.setupPhoneMaskingAndWhatsapp(frm);\r\n            } else {\r\n                // console.error(\"‚ùå setupPhoneMaskingAndWhatsapp not defined\");\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 0,
  "modified": "2025-07-30 08:51:15.932026",
  "module": "My_Data",
  "name": "Jos_Mask+Whap_Sup",
  "script": "frappe.ui.form.on('Supplier', {\r\n    refresh(frm) {\r\n        // console.log(\"üìã Running phone_utils setup for supplierer\");\r\n        frappe.require(\"/assets/josfe/js/phone_utils.js\", () => {\r\n            if (typeof josfe?.setupPhoneMaskingAndWhatsapp === \"function\") {\r\n                josfe.setupPhoneMaskingAndWhatsapp(frm);\r\n            } else {\r\n                // console.error(\"‚ùå setupPhoneMaskingAndWhatsapp not defined\");\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Contact",
  "enabled": 0,
  "modified": "2025-07-30 08:51:28.131984",
  "module": "My_Data",
  "name": "Jos_Mask+Whap_Contact",
  "script": "frappe.ui.form.on('Contact', {\r\n    refresh(frm) {\r\n        // console.log(\"üìã Running phone_utils setup for Contact\");\r\n        frappe.require(\"/assets/josfe/js/phone_utils.js\", () => {\r\n            if (typeof josfe?.setupPhoneMaskingAndWhatsapp === \"function\") {\r\n                josfe.setupPhoneMaskingAndWhatsapp(frm);\r\n            } else {\r\n                // console.error(\"‚ùå setupPhoneMaskingAndWhatsapp not defined\");\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Contact",
  "enabled": 1,
  "modified": "2025-07-29 11:09:37.757628",
  "module": "My_Data",
  "name": "Jos_Con_Phone+Ext+WhApp_HTML",
  "script": "frappe.ui.form.on('Contact', {\r\n  after_save(frm) {\r\n    (frm.doc.links || []).forEach(link => {\r\n      if (link.link_doctype === 'Customer') {\r\n        const customerName = link.link_name;\r\n        const openCustomerForm = frappe.container.page.frm;\r\n\r\n        // If the linked customer is currently open, reload it to refresh the HTML\r\n        if (openCustomerForm && openCustomerForm.doctype === 'Customer' && openCustomerForm.doc.name === customerName) {\r\n          openCustomerForm.reload_doc();\r\n        }\r\n      }\r\n    });\r\n  }\r\n});\r\n",
  "view": "Form"
 }
]