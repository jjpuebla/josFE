[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2025-07-18 11:13:40.427362",
  "module": "ClienteSetup",
  "name": "Jos_Address-City-Sync-from_ecua_cities",
  "script": "/**\r\n * Address - Sync and UI Customization Script\r\n * -------------------------------------------\r\n * Purpose:\r\n * This script is executed on the Address Doctype form.\r\n * It performs two main functions:\r\n * \r\n * 1. Automatically copies the value from the custom field `custom_jos_ecua_cities`\r\n *    to the standard ERPNext `city` field. This ensures that custom input is\r\n *    synced with the system field used in reports, filters, etc.\r\n * \r\n * 2. Hides the `city` field in the form to prevent user confusion or double input.\r\n *    This is done at the UI level using `frm.set_df_property` so it does not affect the\r\n *    underlying metadata or database schema (unlike Property Setter).\r\n */\r\n\r\nfrappe.ui.form.on('Address', {\r\n    onload: function(frm) {\r\n        // If the standard city field is empty but the custom field has a value,\r\n        // auto-fill it. This happens when loading a new or unsaved form.\r\n        if (!frm.doc.city && frm.doc.custom_jos_ecua_cities) {\r\n            frm.set_value('city', frm.doc.custom_jos_ecua_cities);\r\n        }\r\n\r\n        // Hide the standard city field in the UI.\r\n        // This avoids user confusion between native and custom fields.\r\n        // It does NOT create a permanent Property Setter — only affects UI.\r\n        frm.set_df_property(\"city\", \"hidden\", 1);\r\n    },\r\n\r\n    validate: function(frm) {\r\n        // Ensure the sync between custom and native field is enforced on save.\r\n        // Even if the user never touched the field manually, the value is copied over.\r\n        if (frm.doc.custom_jos_ecua_cities && frm.doc.city !== frm.doc.custom_jos_ecua_cities) {\r\n            frm.set_value('city', frm.doc.custom_jos_ecua_cities);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Company",
  "enabled": 0,
  "modified": "2025-09-03 12:52:51.027955",
  "module": "My_Data",
  "name": "Jos_Validacion_Certificado_P12",
  "script": "frappe.ui.form.on('Company', {\r\n    onload(frm) {\r\n        if (!frm.custom_firma_btn_rendered) {\r\n            frm.fields_dict.custom_jos_firma_electronica.$wrapper.append(`\r\n                <div style=\"margin-top: 10px; margin-bottom: 20px;\">\r\n                    <button type=\"button\" class=\"btn btn-primary\" id=\"btn-validar-firma\">\r\n                        ✅ Validar Firma y Transmitir XML a SRI\r\n                    </button>\r\n                </div>\r\n            `);\r\n\r\n            frm.fields_dict.custom_jos_firma_electronica.$wrapper.find('#btn-validar-firma').on('click', function () {\r\n                frappe.prompt([\r\n                    {\r\n                        fieldname: 'password',\r\n                        label: 'Ingrese la contraseña del archivo .p12',\r\n                        fieldtype: 'Password',\r\n                        reqd: 1\r\n                    }\r\n                ], (values) => {\r\n                    const password = values.password;\r\n                    if (!password || password.trim() === \"\") {\r\n                        frappe.msgprint(\"⚠️ Debes ingresar la contraseña.\");\r\n                        return;\r\n                    }\r\n                    frappe.call({\r\n                        method: \"josfe.sri_invoicing.validations.p12_to_pem.convertir_y_validar\",\r\n                        args: {\r\n                            company_name: frm.doc.name,\r\n                            p12_password: password\r\n                        },\r\n                        callback: function (res) {\r\n                            if (res.message && res.message.status === \"success\") {\r\n                                frm.set_value(\"custom_jos_ruc_certificado\", res.message.ruc);\r\n                                frm.set_value(\"custom_jos_fecha_expiracion\", res.message.fecha_expiracion);\r\n\r\n                                frm.fields_dict.custom_jos_ruc_certificado.$wrapper.find(\"input\").css(\"background-color\", \"#e6ffe6\");\r\n                                frm.fields_dict.custom_jos_fecha_expiracion.$wrapper.find(\"input\").css(\"background-color\", \"#e6ffe6\");\r\n\r\n                                frappe.call({\r\n                                    method: \"josfe.sri_invoicing.transmission.transmitir_sri.transmitir_xml\",\r\n                                    args: {\r\n                                        company_name: frm.doc.name\r\n                                    },\r\n                                    callback: function (r2) {\r\n                                        frappe.msgprint({\r\n                                            title: \"📤 Transmisión Exitosa\",\r\n                                            message: \"✅ Proceso completado. XML transmitido.\",\r\n                                            indicator: \"green\"\r\n                                        });\r\n                                    }\r\n                                });\r\n\r\n                            } else {\r\n                                frappe.msgprint({\r\n                                    title: \"❌ Error\",\r\n                                    message: res.message.msg || \"Error durante la validación.\",\r\n                                    indicator: \"red\"\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                }, 'Validación de Firma Electrónica');\r\n            });\r\n\r\n            frm.custom_firma_btn_rendered = true;\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Company",
  "enabled": 1,
  "modified": "2025-07-21 01:05:57.356360",
  "module": "My_Data",
  "name": "Jos_Update_Matriz_Direccion",
  "script": "frappe.ui.form.on('Jos_Establecimientos', {\r\n    jos_matriz: function(frm, cdt, cdn) {\r\n        const selected_row = locals[cdt][cdn];\r\n\r\n        // Count how many other rows are already checked\r\n        const checked_others = (frm.doc.custom_jos_tabla_estab || []).filter(\r\n            row => row.jos_matriz && row.name !== selected_row.name\r\n        );\r\n\r\n        // If another row is already checked and this one is trying to be checked too\r\n        if (checked_others.length > 0 && selected_row.jos_matriz) {\r\n            frappe.msgprint({\r\n                title: \"Solo una matriz permitida\",\r\n                message: \"Ya hay un establecimiento marcado como matriz. Solo se permite uno.\",\r\n                indicator: \"red\"\r\n            });\r\n\r\n            // Cancel the current checkbox toggle\r\n            selected_row.jos_matriz = 0;\r\n            frm.refresh_field('custom_jos_tabla_estab');\r\n            return;\r\n        }\r\n\r\n        // If this row is being checked, update dirección matriz\r\n        if (selected_row.jos_matriz) {\r\n            frm.set_value('custom_jos_direccion_matriz', selected_row.jos_address || '');\r\n        } else {\r\n            // If unchecked, update based on any other checked row\r\n            const still_checked = (frm.doc.custom_jos_tabla_estab || []).find(row => row.jos_matriz);\r\n            frm.set_value('custom_jos_direccion_matriz', still_checked?.jos_address || '');\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Company",
  "enabled": 1,
  "modified": "2025-07-22 01:15:35.750235",
  "module": "My_Data",
  "name": "Jos_ChildTable_Sucursales",
  "script": "frappe.ui.form.on('Company', {\r\n  onload: function(frm) {\r\n    // 1. Inject naming series options into the child table field\r\n    frappe.call({\r\n      method: \"josfe.api.naming_series.get_naming_series_options_for\",\r\n      args: { doctype: \"Sales Invoice\" },\r\n      callback: function(res) {\r\n        if (res.message) {\r\n          const series_options = res.message.map(r => r.name);\r\n\r\n          frm.fields_dict.custom_jos_tabla_estab.grid.update_docfield_property(\r\n            \"jos_naming_series\",\r\n            \"options\",\r\n            series_options.join('\\n')\r\n          );\r\n\r\n          frm.refresh_field(\"custom_jos_tabla_estab\");\r\n        }\r\n      }\r\n    });\r\n\r\n    // 2. (Optional) Limit jos_warehouse to group warehouses under a parent\r\n    frm.fields_dict.custom_jos_tabla_estab.grid.get_field('jos_warehouse').get_query = function(doc, cdt, cdn) {\r\n      return {\r\n        filters: {\r\n          parent_warehouse: \"All Warehouses - A\",\r\n          is_group: 1\r\n        }\r\n      };\r\n    };\r\n  }\r\n});\r\n\r\nfrappe.ui.form.on('Jos_Establecimientos', {\r\n  jos_warehouse: function(frm, cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n\r\n    if (row.jos_warehouse) {\r\n      frappe.call({\r\n        method: \"josfe.api.naming_series.get_address_for_warehouse\",\r\n        args: {\r\n          warehouse: row.jos_warehouse\r\n        },\r\n        callback: function(res) {\r\n          if (res.message) {\r\n            frappe.model.set_value(cdt, cdn, \"jos_address\", res.message);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Company",
  "enabled": 1,
  "modified": "2025-07-22 23:39:23.716667",
  "module": "My_Data",
  "name": "Jos_RazonSocial_Sync_CompanyName",
  "script": "frappe.ui.form.on('Company', {\r\n  onload: function(frm) {\r\n    // Force company_name to be read-only and visible\r\n    frm.set_df_property('company_name', 'read_only', 1);\r\n    frm.set_df_property('company_name', 'bold', 1);\r\n    frm.set_df_property('company_name', 'hidden', 0);\r\n\r\n    // Force re-render if needed\r\n    frm.refresh_field('company_name');\r\n  },\r\n\r\n  custom_jos_razon_social: function(frm) {\r\n    if (frm.doc.custom_jos_razon_social) {\r\n      frm.set_value('company_name', frm.doc.custom_jos_razon_social);\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2025-07-31 01:10:14.121504",
  "module": "ClienteSetup",
  "name": "Jos_Customer_Fields_UI",
  "script": "/**\r\n * Customer Form Fields Setup\r\n * ------------------------------------------------------------\r\n\r\n */\r\n\r\nfrappe.ui.form.on('Customer', {\r\n    // 🔄 When user edits the custom name field, update the standard name\r\n    custom_jos_nombre_cliente: function(frm) {\r\n        if (frm.doc.custom_jos_nombre_cliente) {\r\n            frm.set_value('customer_name', frm.doc.custom_jos_nombre_cliente);\r\n        }\r\n    },\r\n\r\n    // 🧠 On form load, optionally initialize the custom field with customer_name if missing\r\n    onload: function(frm) {\r\n        if (!frm.doc.custom_jos_nombre_cliente && frm.doc.customer_name) {\r\n            frm.set_value('custom_jos_nombre_cliente', frm.doc.customer_name);\r\n        }\r\n// \t\tfrm.set_df_property(\"customer_name\", \"read_only\", 1);\r\n// \t\tfrm.set_df_property(\"tax_id\", \"read_only\", 1);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2025-07-24 14:48:37.660373",
  "module": "Compras",
  "name": "Jos_Supplier_Fields_UI",
  "script": "/**\r\n * Supplier Form Fields Setup\r\n * ------------------------------------------------------------\r\n\r\n */\r\n\r\nfrappe.ui.form.on('Supplier', {\r\n    // 🔄 When user edits the custom name field, update the standard name\r\n    custom_jos_nombre_proveedor: function(frm) {\r\n        if (frm.doc.custom_jos_nombre_proveedor\r\n    ) {\r\n            frm.set_value('supplier_name', frm.doc.custom_jos_nombre_proveedor);\r\n        }\r\n    },\r\n\r\n    // 🧠 On form load, optionally initialize the custom field with customer_name if missing\r\n    onload: function(frm) {\r\n        if (!frm.doc.custom_jos_nombre_proveedor && frm.doc.supplier_name) {\r\n            frm.set_value('custom_jos_nombre_proveedor', frm.doc.supplier_name);\r\n        }\r\n\t\tfrm.set_df_property(\"supplier_name\", \"read_only\", 1);\r\n\t\tfrm.set_df_property(\"tax_id\", \"read_only\", 1);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Contact",
  "enabled": 1,
  "modified": "2025-07-29 09:35:51.401487",
  "module": "My_Data",
  "name": "Jos_MainContact_Read-only",
  "script": "frappe.ui.form.on('Contact', {\r\n  onload(frm) {\r\n    maybe_lock_main_contact(frm);\r\n  },\r\n  refresh(frm) {\r\n    maybe_lock_main_contact(frm);\r\n  }\r\n});\r\n\r\nfunction maybe_lock_main_contact(frm) {\r\n  const first_name = (frm.doc.first_name || '').trim();\r\n\r\n  const is_main_contact = /^Main Contact (Clte|Prov)-.+/.test(first_name);\r\n  if (!is_main_contact) {\r\n    frm.__main_contact_warning_inserted = false;\r\n    frm.$wrapper.find('.main-contact-warning').remove();\r\n    return;\r\n  }\r\n\r\n  // Insert warning only once\r\n  if (!frm.__main_contact_warning_inserted && frm.fields_dict.first_name) {\r\n    const msg_html = `\r\n      <div class=\"alert alert-danger main-contact-warning\" style=\"margin-bottom: 15px;\">\r\n        <strong>⚠ Atención:</strong> Este es un Contacto Principal. Si desea editar hágalo desde la pestaña <strong>'Entrada Rápida'</strong> del Cliente o Proveedor.\r\n      </div>`;\r\n    const $msg = $('<div></div>').html(msg_html);\r\n    frm.fields_dict.first_name.$wrapper.before($msg);\r\n    frm.__main_contact_warning_inserted = true;\r\n  }\r\n\r\n  // Make all fields read-only\r\n  frm.fields.forEach(field => {\r\n    frm.set_df_property(field.df.fieldname, 'read_only', 1);\r\n  });\r\n\r\n  // Disable phone and email tables specifically\r\n  frm.set_df_property('phone_nos', 'read_only', 1);\r\n  frm.set_df_property('email_ids', 'read_only', 1);\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2025-07-29 09:37:43.293100",
  "module": "My_Data",
  "name": "Jos_MainAddress-Read-only",
  "script": "frappe.ui.form.on('Address', {\r\n  onload(frm) {\r\n    maybe_lock_main_address(frm);\r\n  },\r\n  refresh(frm) {\r\n    maybe_lock_main_address(frm);\r\n  }\r\n});\r\n\r\nfunction maybe_lock_main_address(frm) {\r\n  const address_title = (frm.doc.address_title || '').trim();\r\n\r\n  const is_main_address = /^Main Dir\\. para (Clte|Prov)-.+/.test(address_title);\r\n  if (!is_main_address) {\r\n    frm.__main_address_warning_inserted = false;\r\n    frm.$wrapper.find('.main-address-warning').remove();\r\n    return;\r\n  }\r\n\r\n  // Show warning once\r\n  if (!frm.__main_address_warning_inserted && frm.fields_dict.address_title) {\r\n    const msg_html = `\r\n      <div class=\"alert alert-danger main-address-warning\" style=\"margin-bottom: 15px;\">\r\n        <strong>⚠ Atención:</strong> Esta es una Dirección Principal. Si desea editar hágalo desde la pestaña <strong>'Entrada Rápida'</strong> del Cliente o Proveedor.\r\n      </div>`;\r\n    const $msg = $('<div></div>').html(msg_html);\r\n    frm.fields_dict.address_title.$wrapper.before($msg);\r\n    frm.__main_address_warning_inserted = true;\r\n  }\r\n\r\n  // Lock all fields\r\n  frm.fields.forEach(field => {\r\n    frm.set_df_property(field.df.fieldname, 'read_only', 1);\r\n  });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "SRI Endpoint",
  "enabled": 1,
  "modified": "2025-08-14 11:05:02.816054",
  "module": "sri_invoicing",
  "name": "Jos_SRI_Endpoint_List_CSS1",
  "script": "// SRI Endpoint — efficient list highlighter (class-only, diffed, zero thrash)\r\nfrappe.listview_settings[\"SRI Endpoint\"] = {\r\n  onload(listview) {\r\n    const DEBUG = false;\r\n    const LOG = (...a) => DEBUG && console.log(\"[SRI-LIST]\", ...a);\r\n\r\n    // 1) Ensure fields arrive in list rows\r\n    listview.settings.add_fields = [\"name\",\"active\",\"jos_activo\",\"enabled\",\"is_active\",\"activo\",\"status\"];\r\n\r\n    // 2) Inject CSS once: stripe via ::before (no DOM nodes), classes per state\r\n    const CSS_ID = \"sri-stripe-css\";\r\n    if (!document.getElementById(CSS_ID)) {\r\n      const css = document.createElement(\"style\");\r\n      css.id = CSS_ID;\r\n      css.textContent = `\r\n        .sri-row { position: relative; }\r\n        .sri-row::before { content:\"\"; position:absolute; left:0; top:0; bottom:0; width:6px; background:transparent; }\r\n        .sri-active::before   { background:#22c55e; } /* green */\r\n        .sri-inactive::before { background:#ef4444; } /* red   */\r\n        .sri-unknown::before  { background:#9ca3af; } /* gray  */\r\n      `;\r\n      document.head.appendChild(css);\r\n    }\r\n\r\n    // 3) State normalizer\r\n    const truthy = v => v === true || v === 1 || v === \"1\" || v === \"true\";\r\n    const falsy  = v => v === false || v === 0 || v === \"0\" || v === \"false\";\r\n    const stateOf = (doc) => {\r\n      const boolish = (doc.jos_activo ?? doc.enabled ?? doc.is_active ?? doc.activo ?? doc.active);\r\n      if (truthy(boolish)) return \"active\";\r\n      if (falsy(boolish))  return \"inactive\";\r\n      const s = String(doc.status || \"\").toLowerCase();\r\n      if ([\"active\",\"activo\",\"enabled\"].includes(s))   return \"active\";\r\n      if ([\"inactive\",\"inactivo\",\"disabled\"].includes(s)) return \"inactive\";\r\n      return \"unknown\";\r\n    };\r\n\r\n    // 4) Row selector detection (v15 themes vary)\r\n    let ROW_SEL = \".list-row\";\r\n    const detectRowSelector = () => {\r\n      const $r = listview.$result?.find?.(ROW_SEL);\r\n      if ($r && $r.length) return ROW_SEL;\r\n      ROW_SEL = \".list-row-container\";\r\n      return ROW_SEL;\r\n    };\r\n\r\n    // 5) One-pass painter, diffed by dataset\r\n    const paintAll = () => {\r\n      const data = listview.data || [];\r\n      const root = listview.$result?.get?.(0);\r\n      if (!root || !data.length) { LOG(\"no root or no data\"); return; }\r\n\r\n      const sel = detectRowSelector();\r\n      const rows = root.querySelectorAll(sel);\r\n      const n = Math.min(rows.length, data.length);\r\n\r\n      for (let i = 0; i < n; i++) {\r\n        const row = rows[i];\r\n        const doc = data[i];\r\n        // Normalize to a consistent element for class toggling\r\n        const el = row.classList.contains(\"list-row\") ? row : (row.querySelector(\".list-row\") || row);\r\n\r\n        // Mark once\r\n        if (!el.classList.contains(\"sri-row\")) el.classList.add(\"sri-row\");\r\n\r\n        // Compute + diff\r\n        const newState = stateOf(doc); // 'active'|'inactive'|'unknown'\r\n        if (el.dataset.sriState === newState) continue; // unchanged → skip\r\n\r\n        // Update classes atomically\r\n        el.dataset.sriState = newState;\r\n        el.classList.remove(\"sri-active\",\"sri-inactive\",\"sri-unknown\");\r\n        el.classList.add(`sri-${newState}`);\r\n      }\r\n\r\n      // Optional: tidy leftovers if row count shrank\r\n      for (let i = n; i < rows.length; i++) {\r\n        const el = rows[i];\r\n        el.classList?.remove(\"sri-row\",\"sri-active\",\"sri-inactive\",\"sri-unknown\");\r\n        if (el.dataset) delete el.dataset.sriState;\r\n      }\r\n    };\r\n\r\n    // 6) Hook exactly once per render (no MutationObserver, no repeated timeouts)\r\n    const origRender = listview.render;\r\n    listview.render = function () {\r\n      const ret = origRender.apply(this, arguments);\r\n      // Paint on next frame to ensure rows are in the DOM\r\n      requestAnimationFrame(paintAll);\r\n      return ret;\r\n    };\r\n\r\n    // First pass (initial data may already exist)\r\n    requestAnimationFrame(paintAll);\r\n  },\r\n\r\n  // Keep ERPNext's pill (fast + native)\r\n  get_indicator(doc) {\r\n    const truthy = v => v === true || v === 1 || v === \"1\" || v === \"true\";\r\n    const falsy  = v => v === false || v === 0 || v === \"0\" || v === \"false\";\r\n    const b = (doc.jos_activo ?? doc.enabled ?? doc.is_active ?? doc.activo ?? doc.active);\r\n    let state = \"unknown\";\r\n    if (truthy(b)) state = \"active\";\r\n    else if (falsy(b)) state = \"inactive\";\r\n    else {\r\n      const s = String(doc.status || \"\").toLowerCase();\r\n      if ([\"active\",\"activo\",\"enabled\"].includes(s)) state = \"active\";\r\n      else if ([\"inactive\",\"inactivo\",\"disabled\"].includes(s)) state = \"inactive\";\r\n    }\r\n    if (state === \"active\")   return [\"Activo\",   \"green\", [\"active\",\"=\",1]];\r\n    if (state === \"inactive\") return [\"Inactivo\", \"red\",   [\"active\",\"=\",0]];\r\n    return [\"Desconocido\", \"gray\"];\r\n  }\r\n};\r\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Warehouse",
  "enabled": 0,
  "modified": "2025-08-16 01:03:06.705459",
  "module": "sri_invoicing",
  "name": "TJos_Secuenciales_ 3Digit_Fields",
  "script": "frappe.ui.form.on('Warehouse', {\r\n  onload_post_render(frm) {\r\n    // Limit length + digits for the parent field\r\n    const f = frm.get_field('custom_establishment_code');\r\n    if (f && f.$input) {\r\n      f.$input.attr('maxlength', 3);\r\n      f.$input.on('input', function () {\r\n        this.value = this.value.replace(/\\D/g, '').slice(0, 3);\r\n      });\r\n    }\r\n    limit_child_inputs(frm);\r\n  },\r\n  refresh(frm) {\r\n    limit_child_inputs(frm);\r\n  }\r\n});\r\n\r\nfunction limit_child_inputs(frm) {\r\n  const grid = frm.fields_dict.custom_sri_puntos_emision?.grid;\r\n  if (!grid) return;\r\n\r\n  // Re-bind on every refresh to catch new rows\r\n  const $w = $(grid.wrapper);\r\n\r\n  // Set maxlength and digit-only behavior for emission point\r\n  $w.find('input[data-fieldname=\"emission_point_code\"]').attr('maxlength', 3);\r\n\r\n  $w.off('input.sri-limit').on('input.sri-limit', 'input[data-fieldname=\"emission_point_code\"]', function () {\r\n    this.value = this.value.replace(/\\D/g, '').slice(0, 3);\r\n  });\r\n}\r\n",
  "view": "Form"
 }
]